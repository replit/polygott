#!/bin/bash

shopt -s dotglob

LANGUAGE=`detect-language`

while getopts ":sl:" opt; do
  case ${opt} in
    l )
      LANGUAGE=$OPTARG
      ;;
    \? )
      echo "Usage: run-project [-s] [-l language]"
      exit 1
      ;;
  esac
done

case "$LANGUAGE" in
"assembly")
  if [ -d "/opt/homes/assembly" ]; then
    cp -a "/opt/homes/assembly"/* /home/runner/
  fi
  ;;
"java")
  if [ -d "/opt/homes/java" ]; then
    cp -a "/opt/homes/java"/* /home/runner/
  fi
  ;;
"ballerina")
  if [ -d "/opt/homes/ballerina" ]; then
    cp -a "/opt/homes/ballerina"/* /home/runner/
  fi
  ;;
"bash")
  if [ -d "/opt/homes/bash" ]; then
    cp -a "/opt/homes/bash"/* /home/runner/
  fi
  ;;
"c")
  if [ -d "/opt/homes/c" ]; then
    cp -a "/opt/homes/c"/* /home/runner/
  fi
  ;;
"common lisp"|"clisp"|"lisp")
  if [ -d "/opt/homes/common lisp" ]; then
    cp -a "/opt/homes/common lisp"/* /home/runner/
  fi
  ;;
"clojure")
  if [ -d "/opt/homes/clojure" ]; then
    cp -a "/opt/homes/clojure"/* /home/runner/
  fi
  ;;
"cpp"|"c++")
  if [ -d "/opt/homes/cpp" ]; then
    cp -a "/opt/homes/cpp"/* /home/runner/
  fi
  ;;
"cpp11")
  if [ -d "/opt/homes/cpp11" ]; then
    cp -a "/opt/homes/cpp11"/* /home/runner/
  fi
  ;;
"crystal")
  if [ -d "/opt/homes/crystal" ]; then
    cp -a "/opt/homes/crystal"/* /home/runner/
  fi
  ;;
"csharp"|"c#")
  if [ -d "/opt/homes/csharp" ]; then
    cp -a "/opt/homes/csharp"/* /home/runner/
  fi
  ;;
"D"|"d"|"dlang")
  if [ -d "/opt/homes/D" ]; then
    cp -a "/opt/homes/D"/* /home/runner/
  fi
  ;;
"dart")
  if [ -d "/opt/homes/dart" ]; then
    cp -a "/opt/homes/dart"/* /home/runner/
  fi
  ;;
"deno")
  if [ -d "/opt/homes/deno" ]; then
    cp -a "/opt/homes/deno"/* /home/runner/
  fi
  ;;
"elisp")
  if [ -d "/opt/homes/elisp" ]; then
    cp -a "/opt/homes/elisp"/* /home/runner/
  fi
  ;;
"erlang")
  if [ -d "/opt/homes/erlang" ]; then
    cp -a "/opt/homes/erlang"/* /home/runner/
  fi
  ;;
"elixir")
  if [ -d "/opt/homes/elixir" ]; then
    cp -a "/opt/homes/elixir"/* /home/runner/
  fi
  ;;
"nodejs")
  if [ -d "/opt/homes/nodejs" ]; then
    cp -a "/opt/homes/nodejs"/* /home/runner/
  fi
  ;;
"enzyme")
  if [ -d "/opt/homes/enzyme" ]; then
    cp -a "/opt/homes/enzyme"/* /home/runner/
  fi
  ;;
"express")
  if [ -d "/opt/homes/express" ]; then
    cp -a "/opt/homes/express"/* /home/runner/
  fi
  ;;
"flow")
  if [ -d "/opt/homes/flow" ]; then
    cp -a "/opt/homes/flow"/* /home/runner/
  fi
  ;;
"forth")
  if [ -d "/opt/homes/forth" ]; then
    cp -a "/opt/homes/forth"/* /home/runner/
  fi
  ;;
"fortran")
  if [ -d "/opt/homes/fortran" ]; then
    cp -a "/opt/homes/fortran"/* /home/runner/
  fi
  ;;
"fsharp"|"f#")
  if [ -d "/opt/homes/fsharp" ]; then
    cp -a "/opt/homes/fsharp"/* /home/runner/
  fi
  ;;
"gatsbyjs")
  if [ -d "/opt/homes/gatsbyjs" ]; then
    cp -a "/opt/homes/gatsbyjs"/* /home/runner/
  fi
  ;;
"go"|"golang")
  if [ -d "/opt/homes/go" ]; then
    cp -a "/opt/homes/go"/* /home/runner/
  fi
  ;;
"guile"|"scheme")
  if [ -d "/opt/homes/guile" ]; then
    cp -a "/opt/homes/guile"/* /home/runner/
  fi
  ;;
"haskell")
  if [ -d "/opt/homes/haskell" ]; then
    cp -a "/opt/homes/haskell"/* /home/runner/
  fi
  ;;
"haxe")
  if [ -d "/opt/homes/haxe" ]; then
    cp -a "/opt/homes/haxe"/* /home/runner/
  fi
(echo -m Main && echo --interp) > /home/runner/build.hxml
  ;;
"jest")
  if [ -d "/opt/homes/jest" ]; then
    cp -a "/opt/homes/jest"/* /home/runner/
  fi
  ;;
"julia")
  if [ -d "/opt/homes/julia" ]; then
    cp -a "/opt/homes/julia"/* /home/runner/
  fi
  ;;
"kotlin")
  if [ -d "/opt/homes/kotlin" ]; then
    cp -a "/opt/homes/kotlin"/* /home/runner/
  fi
  ;;
"love2d")
  if [ -d "/opt/homes/love2d" ]; then
    cp -a "/opt/homes/love2d"/* /home/runner/
  fi
  ;;
"lua")
  if [ -d "/opt/homes/lua" ]; then
    cp -a "/opt/homes/lua"/* /home/runner/
  fi
  ;;
"mercury")
  if [ -d "/opt/homes/mercury" ]; then
    cp -a "/opt/homes/mercury"/* /home/runner/
  fi
  ;;
"nextjs")
  if [ -d "/opt/homes/nextjs" ]; then
    cp -a "/opt/homes/nextjs"/* /home/runner/
  fi
  ;;
"nim")
  if [ -d "/opt/homes/nim" ]; then
    cp -a "/opt/homes/nim"/* /home/runner/
  fi
  ;;
"nix")
  if [ -d "/opt/homes/nix" ]; then
    cp -a "/opt/homes/nix"/* /home/runner/
  fi
  ;;
"objective-c")
  if [ -d "/opt/homes/objective-c" ]; then
    cp -a "/opt/homes/objective-c"/* /home/runner/
  fi
  ;;
"ocaml")
  if [ -d "/opt/homes/ocaml" ]; then
    cp -a "/opt/homes/ocaml"/* /home/runner/
  fi
  ;;
"pascal")
  if [ -d "/opt/homes/pascal" ]; then
    cp -a "/opt/homes/pascal"/* /home/runner/
  fi
  ;;
"php")
  if [ -d "/opt/homes/php" ]; then
    cp -a "/opt/homes/php"/* /home/runner/
  fi
  ;;
"powershell")
  if [ -d "/opt/homes/powershell" ]; then
    cp -a "/opt/homes/powershell"/* /home/runner/
  fi
  ;;
"prolog")
  if [ -d "/opt/homes/prolog" ]; then
    cp -a "/opt/homes/prolog"/* /home/runner/
  fi
  ;;
"python3")
  if [ -d "/opt/homes/python3" ]; then
    cp -a "/opt/homes/python3"/* /home/runner/
  fi
  ;;
"pygame")
  if [ -d "/opt/homes/pygame" ]; then
    cp -a "/opt/homes/pygame"/* /home/runner/
  fi
  ;;
"python")
  if [ -d "/opt/homes/python" ]; then
    cp -a "/opt/homes/python"/* /home/runner/
  fi
  ;;
"pyxel")
  if [ -d "/opt/homes/pyxel" ]; then
    cp -a "/opt/homes/pyxel"/* /home/runner/
  fi
  ;;
"quil")
  if [ -d "/opt/homes/quil" ]; then
    cp -a "/opt/homes/quil"/* /home/runner/
  fi
  ;;
"raku")
  if [ -d "/opt/homes/raku" ]; then
    cp -a "/opt/homes/raku"/* /home/runner/
  fi
  ;;
"react_native")
  if [ -d "/opt/homes/react_native" ]; then
    cp -a "/opt/homes/react_native"/* /home/runner/
  fi
  ;;
"reactjs")
  if [ -d "/opt/homes/reactjs" ]; then
    cp -a "/opt/homes/reactjs"/* /home/runner/
  fi
  ;;
"reactts")
  if [ -d "/opt/homes/reactts" ]; then
    cp -a "/opt/homes/reactts"/* /home/runner/
  fi
  ;;
"rlang")
  if [ -d "/opt/homes/rlang" ]; then
    cp -a "/opt/homes/rlang"/* /home/runner/
  fi
  ;;
"ruby")
  if [ -d "/opt/homes/ruby" ]; then
    cp -a "/opt/homes/ruby"/* /home/runner/
  fi
  ;;
"rust")
  if [ -d "/opt/homes/rust" ]; then
    cp -a "/opt/homes/rust"/* /home/runner/
  fi
  ;;
"scala")
  if [ -d "/opt/homes/scala" ]; then
    cp -a "/opt/homes/scala"/* /home/runner/
  fi
  ;;
"sqlite")
  if [ -d "/opt/homes/sqlite" ]; then
    cp -a "/opt/homes/sqlite"/* /home/runner/
  fi
  ;;
"swift")
  if [ -d "/opt/homes/swift" ]; then
    cp -a "/opt/homes/swift"/* /home/runner/
  fi
  ;;
"tcl")
  if [ -d "/opt/homes/tcl" ]; then
    cp -a "/opt/homes/tcl"/* /home/runner/
  fi
  ;;
"WebAssembly"|"webassembly")
  if [ -d "/opt/homes/WebAssembly" ]; then
    cp -a "/opt/homes/WebAssembly"/* /home/runner/
  fi
  ;;
"wren")
  if [ -d "/opt/homes/wren" ]; then
    cp -a "/opt/homes/wren"/* /home/runner/
  fi
  ;;
*)
  echo "Unknown Language: $LANGUAGE"
  ;;
esac
